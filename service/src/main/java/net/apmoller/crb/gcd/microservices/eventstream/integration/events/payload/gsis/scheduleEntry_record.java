/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class scheduleEntry_record extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7142572434514607163L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"scheduleEntry_record\",\"namespace\":\"net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis\",\"fields\":[{\"name\":\"rotationId\",\"type\":\"string\"},{\"name\":\"rotationName\",\"type\":\"string\"},{\"name\":\"rotationVersion\",\"type\":\"string\"},{\"name\":\"scheduleEntryID\",\"type\":{\"type\":\"record\",\"name\":\"scheduleEntryID\",\"fields\":[{\"name\":\"scheduleEntryKey\",\"type\":\"string\"},{\"name\":\"scheduleEntryIdentifier\",\"type\":{\"type\":\"record\",\"name\":\"scheduleEntryIdentifier\",\"fields\":[{\"name\":\"vessel\",\"type\":{\"type\":\"record\",\"name\":\"vessel\",\"fields\":[{\"name\":\"vesselCode\",\"type\":\"string\"},{\"name\":\"IMONumber\",\"type\":\"string\"},{\"name\":\"vesselName\",\"type\":\"string\"},{\"name\":\"vesselOperatorCode\",\"type\":\"string\"},{\"name\":\"vesselFlag\",\"type\":\"string\"},{\"name\":\"vesselCallSign\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.vessel\"}},{\"name\":\"arrivalVoyage\",\"type\":{\"type\":\"record\",\"name\":\"arrivalVoyage\",\"fields\":[{\"name\":\"voyage\",\"type\":\"string\"},{\"name\":\"direction\",\"type\":\"string\"},{\"name\":\"transportMode\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.arrivalVoyage\"}},{\"name\":\"departureVoyage\",\"type\":{\"type\":\"record\",\"name\":\"departureVoyage\",\"fields\":[{\"name\":\"voyage\",\"type\":\"string\"},{\"name\":\"direction\",\"type\":\"string\"},{\"name\":\"transportMode\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.departureVoyage\"}},{\"name\":\"service\",\"type\":{\"type\":\"record\",\"name\":\"service\",\"fields\":[{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.service\"}},{\"name\":\"previousPortCall\",\"type\":{\"type\":\"record\",\"name\":\"previousPortCall\",\"fields\":[{\"name\":\"cityCode\",\"type\":\"string\"},{\"name\":\"terminalCode\",\"type\":\"string\"},{\"name\":\"cityName\",\"type\":\"string\"},{\"name\":\"terminalName\",\"type\":\"string\"},{\"name\":\"geoCode\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.previousPortCall\"}},{\"name\":\"currentPortCall\",\"type\":{\"type\":\"record\",\"name\":\"currentPortCall\",\"fields\":[{\"name\":\"cityCode\",\"type\":\"string\"},{\"name\":\"terminalCode\",\"type\":\"string\"},{\"name\":\"cityName\",\"type\":\"string\"},{\"name\":\"terminalName\",\"type\":\"string\"},{\"name\":\"geoCode\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.currentPortCall\"}},{\"name\":\"nextPortCall\",\"type\":{\"type\":\"record\",\"name\":\"nextPortCall\",\"fields\":[{\"name\":\"cityCode\",\"type\":\"string\"},{\"name\":\"terminalCode\",\"type\":\"string\"},{\"name\":\"cityName\",\"type\":\"string\"},{\"name\":\"terminalName\",\"type\":\"string\"},{\"name\":\"geoCode\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.nextPortCall\"}}],\"connect.name\":\"emp.maersk.com.scheduleEntryIdentifier\"}}],\"connect.name\":\"emp.maersk.com.scheduleEntryID\"}},{\"name\":\"siteCallStatus\",\"type\":\"string\"},{\"name\":\"schedule\",\"type\":{\"type\":\"record\",\"name\":\"schedule\",\"fields\":[{\"name\":\"proformaArrival\",\"type\":\"string\"},{\"name\":\"proformaDeparture\",\"type\":\"string\"},{\"name\":\"scheduledArrival\",\"type\":\"string\"},{\"name\":\"scheduledDeparture\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.schedule\"}},{\"name\":\"dummyCall\",\"type\":\"string\"},{\"name\":\"omitReason\",\"type\":\"string\"},{\"name\":\"actual\",\"type\":{\"type\":\"record\",\"name\":\"actual\",\"fields\":[{\"name\":\"actualArrival\",\"type\":\"string\"},{\"name\":\"actualDeparture\",\"type\":\"string\"},{\"name\":\"arrivalAtPilotStation\",\"type\":\"string\"},{\"name\":\"firstPilotOnBoard\",\"type\":\"string\"},{\"name\":\"pilotOff\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.actual\"}},{\"name\":\"notes\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.scheduleEntry_record\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<scheduleEntry_record> ENCODER =
      new BinaryMessageEncoder<scheduleEntry_record>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<scheduleEntry_record> DECODER =
      new BinaryMessageDecoder<scheduleEntry_record>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<scheduleEntry_record> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<scheduleEntry_record> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<scheduleEntry_record> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<scheduleEntry_record>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this scheduleEntry_record to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a scheduleEntry_record from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a scheduleEntry_record instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static scheduleEntry_record fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence rotationId;
  @Deprecated public java.lang.CharSequence rotationName;
  @Deprecated public java.lang.CharSequence rotationVersion;
  @Deprecated public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryID scheduleEntryID;
  @Deprecated public java.lang.CharSequence siteCallStatus;
  @Deprecated public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.schedule schedule;
  @Deprecated public java.lang.CharSequence dummyCall;
  @Deprecated public java.lang.CharSequence omitReason;
  @Deprecated public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual actual;
  @Deprecated public java.lang.CharSequence notes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public scheduleEntry_record() {}

  /**
   * All-args constructor.
   * @param rotationId The new value for rotationId
   * @param rotationName The new value for rotationName
   * @param rotationVersion The new value for rotationVersion
   * @param scheduleEntryID The new value for scheduleEntryID
   * @param siteCallStatus The new value for siteCallStatus
   * @param schedule The new value for schedule
   * @param dummyCall The new value for dummyCall
   * @param omitReason The new value for omitReason
   * @param actual The new value for actual
   * @param notes The new value for notes
   */
  public scheduleEntry_record(java.lang.CharSequence rotationId, java.lang.CharSequence rotationName, java.lang.CharSequence rotationVersion, net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryID scheduleEntryID, java.lang.CharSequence siteCallStatus, net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.schedule schedule, java.lang.CharSequence dummyCall, java.lang.CharSequence omitReason, net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual actual, java.lang.CharSequence notes) {
    this.rotationId = rotationId;
    this.rotationName = rotationName;
    this.rotationVersion = rotationVersion;
    this.scheduleEntryID = scheduleEntryID;
    this.siteCallStatus = siteCallStatus;
    this.schedule = schedule;
    this.dummyCall = dummyCall;
    this.omitReason = omitReason;
    this.actual = actual;
    this.notes = notes;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return rotationId;
    case 1: return rotationName;
    case 2: return rotationVersion;
    case 3: return scheduleEntryID;
    case 4: return siteCallStatus;
    case 5: return schedule;
    case 6: return dummyCall;
    case 7: return omitReason;
    case 8: return actual;
    case 9: return notes;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: rotationId = (java.lang.CharSequence)value$; break;
    case 1: rotationName = (java.lang.CharSequence)value$; break;
    case 2: rotationVersion = (java.lang.CharSequence)value$; break;
    case 3: scheduleEntryID = (net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryID)value$; break;
    case 4: siteCallStatus = (java.lang.CharSequence)value$; break;
    case 5: schedule = (net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.schedule)value$; break;
    case 6: dummyCall = (java.lang.CharSequence)value$; break;
    case 7: omitReason = (java.lang.CharSequence)value$; break;
    case 8: actual = (net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual)value$; break;
    case 9: notes = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'rotationId' field.
   * @return The value of the 'rotationId' field.
   */
  public java.lang.CharSequence getRotationId() {
    return rotationId;
  }


  /**
   * Sets the value of the 'rotationId' field.
   * @param value the value to set.
   */
  public void setRotationId(java.lang.CharSequence value) {
    this.rotationId = value;
  }

  /**
   * Gets the value of the 'rotationName' field.
   * @return The value of the 'rotationName' field.
   */
  public java.lang.CharSequence getRotationName() {
    return rotationName;
  }


  /**
   * Sets the value of the 'rotationName' field.
   * @param value the value to set.
   */
  public void setRotationName(java.lang.CharSequence value) {
    this.rotationName = value;
  }

  /**
   * Gets the value of the 'rotationVersion' field.
   * @return The value of the 'rotationVersion' field.
   */
  public java.lang.CharSequence getRotationVersion() {
    return rotationVersion;
  }


  /**
   * Sets the value of the 'rotationVersion' field.
   * @param value the value to set.
   */
  public void setRotationVersion(java.lang.CharSequence value) {
    this.rotationVersion = value;
  }

  /**
   * Gets the value of the 'scheduleEntryID' field.
   * @return The value of the 'scheduleEntryID' field.
   */
  public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryID getScheduleEntryID() {
    return scheduleEntryID;
  }


  /**
   * Sets the value of the 'scheduleEntryID' field.
   * @param value the value to set.
   */
  public void setScheduleEntryID(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryID value) {
    this.scheduleEntryID = value;
  }

  /**
   * Gets the value of the 'siteCallStatus' field.
   * @return The value of the 'siteCallStatus' field.
   */
  public java.lang.CharSequence getSiteCallStatus() {
    return siteCallStatus;
  }


  /**
   * Sets the value of the 'siteCallStatus' field.
   * @param value the value to set.
   */
  public void setSiteCallStatus(java.lang.CharSequence value) {
    this.siteCallStatus = value;
  }

  /**
   * Gets the value of the 'schedule' field.
   * @return The value of the 'schedule' field.
   */
  public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.schedule getSchedule() {
    return schedule;
  }


  /**
   * Sets the value of the 'schedule' field.
   * @param value the value to set.
   */
  public void setSchedule(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.schedule value) {
    this.schedule = value;
  }

  /**
   * Gets the value of the 'dummyCall' field.
   * @return The value of the 'dummyCall' field.
   */
  public java.lang.CharSequence getDummyCall() {
    return dummyCall;
  }


  /**
   * Sets the value of the 'dummyCall' field.
   * @param value the value to set.
   */
  public void setDummyCall(java.lang.CharSequence value) {
    this.dummyCall = value;
  }

  /**
   * Gets the value of the 'omitReason' field.
   * @return The value of the 'omitReason' field.
   */
  public java.lang.CharSequence getOmitReason() {
    return omitReason;
  }


  /**
   * Sets the value of the 'omitReason' field.
   * @param value the value to set.
   */
  public void setOmitReason(java.lang.CharSequence value) {
    this.omitReason = value;
  }

  /**
   * Gets the value of the 'actual' field.
   * @return The value of the 'actual' field.
   */
  public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual getActual() {
    return actual;
  }


  /**
   * Sets the value of the 'actual' field.
   * @param value the value to set.
   */
  public void setActual(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual value) {
    this.actual = value;
  }

  /**
   * Gets the value of the 'notes' field.
   * @return The value of the 'notes' field.
   */
  public java.lang.CharSequence getNotes() {
    return notes;
  }


  /**
   * Sets the value of the 'notes' field.
   * @param value the value to set.
   */
  public void setNotes(java.lang.CharSequence value) {
    this.notes = value;
  }

  /**
   * Creates a new scheduleEntry_record RecordBuilder.
   * @return A new scheduleEntry_record RecordBuilder
   */
  public static net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder newBuilder() {
    return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder();
  }

  /**
   * Creates a new scheduleEntry_record RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new scheduleEntry_record RecordBuilder
   */
  public static net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder newBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder other) {
    if (other == null) {
      return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder();
    } else {
      return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder(other);
    }
  }

  /**
   * Creates a new scheduleEntry_record RecordBuilder by copying an existing scheduleEntry_record instance.
   * @param other The existing instance to copy.
   * @return A new scheduleEntry_record RecordBuilder
   */
  public static net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder newBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record other) {
    if (other == null) {
      return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder();
    } else {
      return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder(other);
    }
  }

  /**
   * RecordBuilder for scheduleEntry_record instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<scheduleEntry_record>
    implements org.apache.avro.data.RecordBuilder<scheduleEntry_record> {

    private java.lang.CharSequence rotationId;
    private java.lang.CharSequence rotationName;
    private java.lang.CharSequence rotationVersion;
    private net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryID scheduleEntryID;
    private net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryID.Builder scheduleEntryIDBuilder;
    private java.lang.CharSequence siteCallStatus;
    private net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.schedule schedule;
    private net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.schedule.Builder scheduleBuilder;
    private java.lang.CharSequence dummyCall;
    private java.lang.CharSequence omitReason;
    private net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual actual;
    private net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.Builder actualBuilder;
    private java.lang.CharSequence notes;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.rotationId)) {
        this.rotationId = data().deepCopy(fields()[0].schema(), other.rotationId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.rotationName)) {
        this.rotationName = data().deepCopy(fields()[1].schema(), other.rotationName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.rotationVersion)) {
        this.rotationVersion = data().deepCopy(fields()[2].schema(), other.rotationVersion);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.scheduleEntryID)) {
        this.scheduleEntryID = data().deepCopy(fields()[3].schema(), other.scheduleEntryID);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasScheduleEntryIDBuilder()) {
        this.scheduleEntryIDBuilder = net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryID.newBuilder(other.getScheduleEntryIDBuilder());
      }
      if (isValidValue(fields()[4], other.siteCallStatus)) {
        this.siteCallStatus = data().deepCopy(fields()[4].schema(), other.siteCallStatus);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.schedule)) {
        this.schedule = data().deepCopy(fields()[5].schema(), other.schedule);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasScheduleBuilder()) {
        this.scheduleBuilder = net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.schedule.newBuilder(other.getScheduleBuilder());
      }
      if (isValidValue(fields()[6], other.dummyCall)) {
        this.dummyCall = data().deepCopy(fields()[6].schema(), other.dummyCall);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.omitReason)) {
        this.omitReason = data().deepCopy(fields()[7].schema(), other.omitReason);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.actual)) {
        this.actual = data().deepCopy(fields()[8].schema(), other.actual);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (other.hasActualBuilder()) {
        this.actualBuilder = net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.newBuilder(other.getActualBuilder());
      }
      if (isValidValue(fields()[9], other.notes)) {
        this.notes = data().deepCopy(fields()[9].schema(), other.notes);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing scheduleEntry_record instance
     * @param other The existing instance to copy.
     */
    private Builder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.rotationId)) {
        this.rotationId = data().deepCopy(fields()[0].schema(), other.rotationId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.rotationName)) {
        this.rotationName = data().deepCopy(fields()[1].schema(), other.rotationName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.rotationVersion)) {
        this.rotationVersion = data().deepCopy(fields()[2].schema(), other.rotationVersion);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.scheduleEntryID)) {
        this.scheduleEntryID = data().deepCopy(fields()[3].schema(), other.scheduleEntryID);
        fieldSetFlags()[3] = true;
      }
      this.scheduleEntryIDBuilder = null;
      if (isValidValue(fields()[4], other.siteCallStatus)) {
        this.siteCallStatus = data().deepCopy(fields()[4].schema(), other.siteCallStatus);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.schedule)) {
        this.schedule = data().deepCopy(fields()[5].schema(), other.schedule);
        fieldSetFlags()[5] = true;
      }
      this.scheduleBuilder = null;
      if (isValidValue(fields()[6], other.dummyCall)) {
        this.dummyCall = data().deepCopy(fields()[6].schema(), other.dummyCall);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.omitReason)) {
        this.omitReason = data().deepCopy(fields()[7].schema(), other.omitReason);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.actual)) {
        this.actual = data().deepCopy(fields()[8].schema(), other.actual);
        fieldSetFlags()[8] = true;
      }
      this.actualBuilder = null;
      if (isValidValue(fields()[9], other.notes)) {
        this.notes = data().deepCopy(fields()[9].schema(), other.notes);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'rotationId' field.
      * @return The value.
      */
    public java.lang.CharSequence getRotationId() {
      return rotationId;
    }


    /**
      * Sets the value of the 'rotationId' field.
      * @param value The value of 'rotationId'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder setRotationId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.rotationId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'rotationId' field has been set.
      * @return True if the 'rotationId' field has been set, false otherwise.
      */
    public boolean hasRotationId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'rotationId' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder clearRotationId() {
      rotationId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'rotationName' field.
      * @return The value.
      */
    public java.lang.CharSequence getRotationName() {
      return rotationName;
    }


    /**
      * Sets the value of the 'rotationName' field.
      * @param value The value of 'rotationName'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder setRotationName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.rotationName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'rotationName' field has been set.
      * @return True if the 'rotationName' field has been set, false otherwise.
      */
    public boolean hasRotationName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'rotationName' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder clearRotationName() {
      rotationName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'rotationVersion' field.
      * @return The value.
      */
    public java.lang.CharSequence getRotationVersion() {
      return rotationVersion;
    }


    /**
      * Sets the value of the 'rotationVersion' field.
      * @param value The value of 'rotationVersion'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder setRotationVersion(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.rotationVersion = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'rotationVersion' field has been set.
      * @return True if the 'rotationVersion' field has been set, false otherwise.
      */
    public boolean hasRotationVersion() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'rotationVersion' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder clearRotationVersion() {
      rotationVersion = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'scheduleEntryID' field.
      * @return The value.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryID getScheduleEntryID() {
      return scheduleEntryID;
    }


    /**
      * Sets the value of the 'scheduleEntryID' field.
      * @param value The value of 'scheduleEntryID'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder setScheduleEntryID(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryID value) {
      validate(fields()[3], value);
      this.scheduleEntryIDBuilder = null;
      this.scheduleEntryID = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'scheduleEntryID' field has been set.
      * @return True if the 'scheduleEntryID' field has been set, false otherwise.
      */
    public boolean hasScheduleEntryID() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'scheduleEntryID' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryID.Builder getScheduleEntryIDBuilder() {
      if (scheduleEntryIDBuilder == null) {
        if (hasScheduleEntryID()) {
          setScheduleEntryIDBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryID.newBuilder(scheduleEntryID));
        } else {
          setScheduleEntryIDBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryID.newBuilder());
        }
      }
      return scheduleEntryIDBuilder;
    }

    /**
     * Sets the Builder instance for the 'scheduleEntryID' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder setScheduleEntryIDBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryID.Builder value) {
      clearScheduleEntryID();
      scheduleEntryIDBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'scheduleEntryID' field has an active Builder instance
     * @return True if the 'scheduleEntryID' field has an active Builder instance
     */
    public boolean hasScheduleEntryIDBuilder() {
      return scheduleEntryIDBuilder != null;
    }

    /**
      * Clears the value of the 'scheduleEntryID' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder clearScheduleEntryID() {
      scheduleEntryID = null;
      scheduleEntryIDBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'siteCallStatus' field.
      * @return The value.
      */
    public java.lang.CharSequence getSiteCallStatus() {
      return siteCallStatus;
    }


    /**
      * Sets the value of the 'siteCallStatus' field.
      * @param value The value of 'siteCallStatus'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder setSiteCallStatus(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.siteCallStatus = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'siteCallStatus' field has been set.
      * @return True if the 'siteCallStatus' field has been set, false otherwise.
      */
    public boolean hasSiteCallStatus() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'siteCallStatus' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder clearSiteCallStatus() {
      siteCallStatus = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'schedule' field.
      * @return The value.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.schedule getSchedule() {
      return schedule;
    }


    /**
      * Sets the value of the 'schedule' field.
      * @param value The value of 'schedule'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder setSchedule(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.schedule value) {
      validate(fields()[5], value);
      this.scheduleBuilder = null;
      this.schedule = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'schedule' field has been set.
      * @return True if the 'schedule' field has been set, false otherwise.
      */
    public boolean hasSchedule() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'schedule' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.schedule.Builder getScheduleBuilder() {
      if (scheduleBuilder == null) {
        if (hasSchedule()) {
          setScheduleBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.schedule.newBuilder(schedule));
        } else {
          setScheduleBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.schedule.newBuilder());
        }
      }
      return scheduleBuilder;
    }

    /**
     * Sets the Builder instance for the 'schedule' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder setScheduleBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.schedule.Builder value) {
      clearSchedule();
      scheduleBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'schedule' field has an active Builder instance
     * @return True if the 'schedule' field has an active Builder instance
     */
    public boolean hasScheduleBuilder() {
      return scheduleBuilder != null;
    }

    /**
      * Clears the value of the 'schedule' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder clearSchedule() {
      schedule = null;
      scheduleBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'dummyCall' field.
      * @return The value.
      */
    public java.lang.CharSequence getDummyCall() {
      return dummyCall;
    }


    /**
      * Sets the value of the 'dummyCall' field.
      * @param value The value of 'dummyCall'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder setDummyCall(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.dummyCall = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'dummyCall' field has been set.
      * @return True if the 'dummyCall' field has been set, false otherwise.
      */
    public boolean hasDummyCall() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'dummyCall' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder clearDummyCall() {
      dummyCall = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'omitReason' field.
      * @return The value.
      */
    public java.lang.CharSequence getOmitReason() {
      return omitReason;
    }


    /**
      * Sets the value of the 'omitReason' field.
      * @param value The value of 'omitReason'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder setOmitReason(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.omitReason = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'omitReason' field has been set.
      * @return True if the 'omitReason' field has been set, false otherwise.
      */
    public boolean hasOmitReason() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'omitReason' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder clearOmitReason() {
      omitReason = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'actual' field.
      * @return The value.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual getActual() {
      return actual;
    }


    /**
      * Sets the value of the 'actual' field.
      * @param value The value of 'actual'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder setActual(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual value) {
      validate(fields()[8], value);
      this.actualBuilder = null;
      this.actual = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'actual' field has been set.
      * @return True if the 'actual' field has been set, false otherwise.
      */
    public boolean hasActual() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'actual' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.Builder getActualBuilder() {
      if (actualBuilder == null) {
        if (hasActual()) {
          setActualBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.newBuilder(actual));
        } else {
          setActualBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.newBuilder());
        }
      }
      return actualBuilder;
    }

    /**
     * Sets the Builder instance for the 'actual' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder setActualBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.Builder value) {
      clearActual();
      actualBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'actual' field has an active Builder instance
     * @return True if the 'actual' field has an active Builder instance
     */
    public boolean hasActualBuilder() {
      return actualBuilder != null;
    }

    /**
      * Clears the value of the 'actual' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder clearActual() {
      actual = null;
      actualBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'notes' field.
      * @return The value.
      */
    public java.lang.CharSequence getNotes() {
      return notes;
    }


    /**
      * Sets the value of the 'notes' field.
      * @param value The value of 'notes'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder setNotes(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.notes = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'notes' field has been set.
      * @return True if the 'notes' field has been set, false otherwise.
      */
    public boolean hasNotes() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'notes' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record.Builder clearNotes() {
      notes = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public scheduleEntry_record build() {
      try {
        scheduleEntry_record record = new scheduleEntry_record();
        record.rotationId = fieldSetFlags()[0] ? this.rotationId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.rotationName = fieldSetFlags()[1] ? this.rotationName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.rotationVersion = fieldSetFlags()[2] ? this.rotationVersion : (java.lang.CharSequence) defaultValue(fields()[2]);
        if (scheduleEntryIDBuilder != null) {
          try {
            record.scheduleEntryID = this.scheduleEntryIDBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("scheduleEntryID"));
            throw e;
          }
        } else {
          record.scheduleEntryID = fieldSetFlags()[3] ? this.scheduleEntryID : (net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryID) defaultValue(fields()[3]);
        }
        record.siteCallStatus = fieldSetFlags()[4] ? this.siteCallStatus : (java.lang.CharSequence) defaultValue(fields()[4]);
        if (scheduleBuilder != null) {
          try {
            record.schedule = this.scheduleBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("schedule"));
            throw e;
          }
        } else {
          record.schedule = fieldSetFlags()[5] ? this.schedule : (net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.schedule) defaultValue(fields()[5]);
        }
        record.dummyCall = fieldSetFlags()[6] ? this.dummyCall : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.omitReason = fieldSetFlags()[7] ? this.omitReason : (java.lang.CharSequence) defaultValue(fields()[7]);
        if (actualBuilder != null) {
          try {
            record.actual = this.actualBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("actual"));
            throw e;
          }
        } else {
          record.actual = fieldSetFlags()[8] ? this.actual : (net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual) defaultValue(fields()[8]);
        }
        record.notes = fieldSetFlags()[9] ? this.notes : (java.lang.CharSequence) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<scheduleEntry_record>
    WRITER$ = (org.apache.avro.io.DatumWriter<scheduleEntry_record>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<scheduleEntry_record>
    READER$ = (org.apache.avro.io.DatumReader<scheduleEntry_record>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.rotationId);

    out.writeString(this.rotationName);

    out.writeString(this.rotationVersion);

    this.scheduleEntryID.customEncode(out);

    out.writeString(this.siteCallStatus);

    this.schedule.customEncode(out);

    out.writeString(this.dummyCall);

    out.writeString(this.omitReason);

    this.actual.customEncode(out);

    out.writeString(this.notes);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.rotationId = in.readString(this.rotationId instanceof Utf8 ? (Utf8)this.rotationId : null);

      this.rotationName = in.readString(this.rotationName instanceof Utf8 ? (Utf8)this.rotationName : null);

      this.rotationVersion = in.readString(this.rotationVersion instanceof Utf8 ? (Utf8)this.rotationVersion : null);

      if (this.scheduleEntryID == null) {
        this.scheduleEntryID = new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryID();
      }
      this.scheduleEntryID.customDecode(in);

      this.siteCallStatus = in.readString(this.siteCallStatus instanceof Utf8 ? (Utf8)this.siteCallStatus : null);

      if (this.schedule == null) {
        this.schedule = new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.schedule();
      }
      this.schedule.customDecode(in);

      this.dummyCall = in.readString(this.dummyCall instanceof Utf8 ? (Utf8)this.dummyCall : null);

      this.omitReason = in.readString(this.omitReason instanceof Utf8 ? (Utf8)this.omitReason : null);

      if (this.actual == null) {
        this.actual = new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual();
      }
      this.actual.customDecode(in);

      this.notes = in.readString(this.notes instanceof Utf8 ? (Utf8)this.notes : null);

    } else {
      for (int i = 0; i < 10; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.rotationId = in.readString(this.rotationId instanceof Utf8 ? (Utf8)this.rotationId : null);
          break;

        case 1:
          this.rotationName = in.readString(this.rotationName instanceof Utf8 ? (Utf8)this.rotationName : null);
          break;

        case 2:
          this.rotationVersion = in.readString(this.rotationVersion instanceof Utf8 ? (Utf8)this.rotationVersion : null);
          break;

        case 3:
          if (this.scheduleEntryID == null) {
            this.scheduleEntryID = new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryID();
          }
          this.scheduleEntryID.customDecode(in);
          break;

        case 4:
          this.siteCallStatus = in.readString(this.siteCallStatus instanceof Utf8 ? (Utf8)this.siteCallStatus : null);
          break;

        case 5:
          if (this.schedule == null) {
            this.schedule = new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.schedule();
          }
          this.schedule.customDecode(in);
          break;

        case 6:
          this.dummyCall = in.readString(this.dummyCall instanceof Utf8 ? (Utf8)this.dummyCall : null);
          break;

        case 7:
          this.omitReason = in.readString(this.omitReason instanceof Utf8 ? (Utf8)this.omitReason : null);
          break;

        case 8:
          if (this.actual == null) {
            this.actual = new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual();
          }
          this.actual.customDecode(in);
          break;

        case 9:
          this.notes = in.readString(this.notes instanceof Utf8 ? (Utf8)this.notes : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










