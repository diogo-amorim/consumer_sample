/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class actual extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3096256185823910234L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"actual\",\"namespace\":\"net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis\",\"fields\":[{\"name\":\"actualArrival\",\"type\":\"string\"},{\"name\":\"actualDeparture\",\"type\":\"string\"},{\"name\":\"arrivalAtPilotStation\",\"type\":\"string\"},{\"name\":\"firstPilotOnBoard\",\"type\":\"string\"},{\"name\":\"pilotOff\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.actual\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<actual> ENCODER =
      new BinaryMessageEncoder<actual>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<actual> DECODER =
      new BinaryMessageDecoder<actual>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<actual> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<actual> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<actual> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<actual>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this actual to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a actual from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a actual instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static actual fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence actualArrival;
  @Deprecated public java.lang.CharSequence actualDeparture;
  @Deprecated public java.lang.CharSequence arrivalAtPilotStation;
  @Deprecated public java.lang.CharSequence firstPilotOnBoard;
  @Deprecated public java.lang.CharSequence pilotOff;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public actual() {}

  /**
   * All-args constructor.
   * @param actualArrival The new value for actualArrival
   * @param actualDeparture The new value for actualDeparture
   * @param arrivalAtPilotStation The new value for arrivalAtPilotStation
   * @param firstPilotOnBoard The new value for firstPilotOnBoard
   * @param pilotOff The new value for pilotOff
   */
  public actual(java.lang.CharSequence actualArrival, java.lang.CharSequence actualDeparture, java.lang.CharSequence arrivalAtPilotStation, java.lang.CharSequence firstPilotOnBoard, java.lang.CharSequence pilotOff) {
    this.actualArrival = actualArrival;
    this.actualDeparture = actualDeparture;
    this.arrivalAtPilotStation = arrivalAtPilotStation;
    this.firstPilotOnBoard = firstPilotOnBoard;
    this.pilotOff = pilotOff;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return actualArrival;
    case 1: return actualDeparture;
    case 2: return arrivalAtPilotStation;
    case 3: return firstPilotOnBoard;
    case 4: return pilotOff;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: actualArrival = (java.lang.CharSequence)value$; break;
    case 1: actualDeparture = (java.lang.CharSequence)value$; break;
    case 2: arrivalAtPilotStation = (java.lang.CharSequence)value$; break;
    case 3: firstPilotOnBoard = (java.lang.CharSequence)value$; break;
    case 4: pilotOff = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'actualArrival' field.
   * @return The value of the 'actualArrival' field.
   */
  public java.lang.CharSequence getActualArrival() {
    return actualArrival;
  }


  /**
   * Sets the value of the 'actualArrival' field.
   * @param value the value to set.
   */
  public void setActualArrival(java.lang.CharSequence value) {
    this.actualArrival = value;
  }

  /**
   * Gets the value of the 'actualDeparture' field.
   * @return The value of the 'actualDeparture' field.
   */
  public java.lang.CharSequence getActualDeparture() {
    return actualDeparture;
  }


  /**
   * Sets the value of the 'actualDeparture' field.
   * @param value the value to set.
   */
  public void setActualDeparture(java.lang.CharSequence value) {
    this.actualDeparture = value;
  }

  /**
   * Gets the value of the 'arrivalAtPilotStation' field.
   * @return The value of the 'arrivalAtPilotStation' field.
   */
  public java.lang.CharSequence getArrivalAtPilotStation() {
    return arrivalAtPilotStation;
  }


  /**
   * Sets the value of the 'arrivalAtPilotStation' field.
   * @param value the value to set.
   */
  public void setArrivalAtPilotStation(java.lang.CharSequence value) {
    this.arrivalAtPilotStation = value;
  }

  /**
   * Gets the value of the 'firstPilotOnBoard' field.
   * @return The value of the 'firstPilotOnBoard' field.
   */
  public java.lang.CharSequence getFirstPilotOnBoard() {
    return firstPilotOnBoard;
  }


  /**
   * Sets the value of the 'firstPilotOnBoard' field.
   * @param value the value to set.
   */
  public void setFirstPilotOnBoard(java.lang.CharSequence value) {
    this.firstPilotOnBoard = value;
  }

  /**
   * Gets the value of the 'pilotOff' field.
   * @return The value of the 'pilotOff' field.
   */
  public java.lang.CharSequence getPilotOff() {
    return pilotOff;
  }


  /**
   * Sets the value of the 'pilotOff' field.
   * @param value the value to set.
   */
  public void setPilotOff(java.lang.CharSequence value) {
    this.pilotOff = value;
  }

  /**
   * Creates a new actual RecordBuilder.
   * @return A new actual RecordBuilder
   */
  public static net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.Builder newBuilder() {
    return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.Builder();
  }

  /**
   * Creates a new actual RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new actual RecordBuilder
   */
  public static net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.Builder newBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.Builder other) {
    if (other == null) {
      return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.Builder();
    } else {
      return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.Builder(other);
    }
  }

  /**
   * Creates a new actual RecordBuilder by copying an existing actual instance.
   * @param other The existing instance to copy.
   * @return A new actual RecordBuilder
   */
  public static net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.Builder newBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual other) {
    if (other == null) {
      return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.Builder();
    } else {
      return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.Builder(other);
    }
  }

  /**
   * RecordBuilder for actual instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<actual>
    implements org.apache.avro.data.RecordBuilder<actual> {

    private java.lang.CharSequence actualArrival;
    private java.lang.CharSequence actualDeparture;
    private java.lang.CharSequence arrivalAtPilotStation;
    private java.lang.CharSequence firstPilotOnBoard;
    private java.lang.CharSequence pilotOff;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.actualArrival)) {
        this.actualArrival = data().deepCopy(fields()[0].schema(), other.actualArrival);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.actualDeparture)) {
        this.actualDeparture = data().deepCopy(fields()[1].schema(), other.actualDeparture);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.arrivalAtPilotStation)) {
        this.arrivalAtPilotStation = data().deepCopy(fields()[2].schema(), other.arrivalAtPilotStation);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.firstPilotOnBoard)) {
        this.firstPilotOnBoard = data().deepCopy(fields()[3].schema(), other.firstPilotOnBoard);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.pilotOff)) {
        this.pilotOff = data().deepCopy(fields()[4].schema(), other.pilotOff);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing actual instance
     * @param other The existing instance to copy.
     */
    private Builder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.actualArrival)) {
        this.actualArrival = data().deepCopy(fields()[0].schema(), other.actualArrival);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.actualDeparture)) {
        this.actualDeparture = data().deepCopy(fields()[1].schema(), other.actualDeparture);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.arrivalAtPilotStation)) {
        this.arrivalAtPilotStation = data().deepCopy(fields()[2].schema(), other.arrivalAtPilotStation);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.firstPilotOnBoard)) {
        this.firstPilotOnBoard = data().deepCopy(fields()[3].schema(), other.firstPilotOnBoard);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.pilotOff)) {
        this.pilotOff = data().deepCopy(fields()[4].schema(), other.pilotOff);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'actualArrival' field.
      * @return The value.
      */
    public java.lang.CharSequence getActualArrival() {
      return actualArrival;
    }


    /**
      * Sets the value of the 'actualArrival' field.
      * @param value The value of 'actualArrival'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.Builder setActualArrival(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.actualArrival = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'actualArrival' field has been set.
      * @return True if the 'actualArrival' field has been set, false otherwise.
      */
    public boolean hasActualArrival() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'actualArrival' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.Builder clearActualArrival() {
      actualArrival = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'actualDeparture' field.
      * @return The value.
      */
    public java.lang.CharSequence getActualDeparture() {
      return actualDeparture;
    }


    /**
      * Sets the value of the 'actualDeparture' field.
      * @param value The value of 'actualDeparture'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.Builder setActualDeparture(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.actualDeparture = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'actualDeparture' field has been set.
      * @return True if the 'actualDeparture' field has been set, false otherwise.
      */
    public boolean hasActualDeparture() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'actualDeparture' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.Builder clearActualDeparture() {
      actualDeparture = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'arrivalAtPilotStation' field.
      * @return The value.
      */
    public java.lang.CharSequence getArrivalAtPilotStation() {
      return arrivalAtPilotStation;
    }


    /**
      * Sets the value of the 'arrivalAtPilotStation' field.
      * @param value The value of 'arrivalAtPilotStation'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.Builder setArrivalAtPilotStation(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.arrivalAtPilotStation = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'arrivalAtPilotStation' field has been set.
      * @return True if the 'arrivalAtPilotStation' field has been set, false otherwise.
      */
    public boolean hasArrivalAtPilotStation() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'arrivalAtPilotStation' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.Builder clearArrivalAtPilotStation() {
      arrivalAtPilotStation = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'firstPilotOnBoard' field.
      * @return The value.
      */
    public java.lang.CharSequence getFirstPilotOnBoard() {
      return firstPilotOnBoard;
    }


    /**
      * Sets the value of the 'firstPilotOnBoard' field.
      * @param value The value of 'firstPilotOnBoard'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.Builder setFirstPilotOnBoard(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.firstPilotOnBoard = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'firstPilotOnBoard' field has been set.
      * @return True if the 'firstPilotOnBoard' field has been set, false otherwise.
      */
    public boolean hasFirstPilotOnBoard() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'firstPilotOnBoard' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.Builder clearFirstPilotOnBoard() {
      firstPilotOnBoard = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'pilotOff' field.
      * @return The value.
      */
    public java.lang.CharSequence getPilotOff() {
      return pilotOff;
    }


    /**
      * Sets the value of the 'pilotOff' field.
      * @param value The value of 'pilotOff'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.Builder setPilotOff(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.pilotOff = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'pilotOff' field has been set.
      * @return True if the 'pilotOff' field has been set, false otherwise.
      */
    public boolean hasPilotOff() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'pilotOff' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.actual.Builder clearPilotOff() {
      pilotOff = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public actual build() {
      try {
        actual record = new actual();
        record.actualArrival = fieldSetFlags()[0] ? this.actualArrival : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.actualDeparture = fieldSetFlags()[1] ? this.actualDeparture : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.arrivalAtPilotStation = fieldSetFlags()[2] ? this.arrivalAtPilotStation : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.firstPilotOnBoard = fieldSetFlags()[3] ? this.firstPilotOnBoard : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.pilotOff = fieldSetFlags()[4] ? this.pilotOff : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<actual>
    WRITER$ = (org.apache.avro.io.DatumWriter<actual>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<actual>
    READER$ = (org.apache.avro.io.DatumReader<actual>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.actualArrival);

    out.writeString(this.actualDeparture);

    out.writeString(this.arrivalAtPilotStation);

    out.writeString(this.firstPilotOnBoard);

    out.writeString(this.pilotOff);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.actualArrival = in.readString(this.actualArrival instanceof Utf8 ? (Utf8)this.actualArrival : null);

      this.actualDeparture = in.readString(this.actualDeparture instanceof Utf8 ? (Utf8)this.actualDeparture : null);

      this.arrivalAtPilotStation = in.readString(this.arrivalAtPilotStation instanceof Utf8 ? (Utf8)this.arrivalAtPilotStation : null);

      this.firstPilotOnBoard = in.readString(this.firstPilotOnBoard instanceof Utf8 ? (Utf8)this.firstPilotOnBoard : null);

      this.pilotOff = in.readString(this.pilotOff instanceof Utf8 ? (Utf8)this.pilotOff : null);

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.actualArrival = in.readString(this.actualArrival instanceof Utf8 ? (Utf8)this.actualArrival : null);
          break;

        case 1:
          this.actualDeparture = in.readString(this.actualDeparture instanceof Utf8 ? (Utf8)this.actualDeparture : null);
          break;

        case 2:
          this.arrivalAtPilotStation = in.readString(this.arrivalAtPilotStation instanceof Utf8 ? (Utf8)this.arrivalAtPilotStation : null);
          break;

        case 3:
          this.firstPilotOnBoard = in.readString(this.firstPilotOnBoard instanceof Utf8 ? (Utf8)this.firstPilotOnBoard : null);
          break;

        case 4:
          this.pilotOff = in.readString(this.pilotOff instanceof Utf8 ? (Utf8)this.pilotOff : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










