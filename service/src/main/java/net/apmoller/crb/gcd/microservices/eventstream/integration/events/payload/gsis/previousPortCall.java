/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class previousPortCall extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6643214970831192036L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"previousPortCall\",\"namespace\":\"net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis\",\"fields\":[{\"name\":\"cityCode\",\"type\":\"string\"},{\"name\":\"terminalCode\",\"type\":\"string\"},{\"name\":\"cityName\",\"type\":\"string\"},{\"name\":\"terminalName\",\"type\":\"string\"},{\"name\":\"geoCode\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.previousPortCall\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<previousPortCall> ENCODER =
      new BinaryMessageEncoder<previousPortCall>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<previousPortCall> DECODER =
      new BinaryMessageDecoder<previousPortCall>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<previousPortCall> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<previousPortCall> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<previousPortCall> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<previousPortCall>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this previousPortCall to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a previousPortCall from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a previousPortCall instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static previousPortCall fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence cityCode;
  @Deprecated public java.lang.CharSequence terminalCode;
  @Deprecated public java.lang.CharSequence cityName;
  @Deprecated public java.lang.CharSequence terminalName;
  @Deprecated public java.lang.CharSequence geoCode;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public previousPortCall() {}

  /**
   * All-args constructor.
   * @param cityCode The new value for cityCode
   * @param terminalCode The new value for terminalCode
   * @param cityName The new value for cityName
   * @param terminalName The new value for terminalName
   * @param geoCode The new value for geoCode
   */
  public previousPortCall(java.lang.CharSequence cityCode, java.lang.CharSequence terminalCode, java.lang.CharSequence cityName, java.lang.CharSequence terminalName, java.lang.CharSequence geoCode) {
    this.cityCode = cityCode;
    this.terminalCode = terminalCode;
    this.cityName = cityName;
    this.terminalName = terminalName;
    this.geoCode = geoCode;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return cityCode;
    case 1: return terminalCode;
    case 2: return cityName;
    case 3: return terminalName;
    case 4: return geoCode;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: cityCode = (java.lang.CharSequence)value$; break;
    case 1: terminalCode = (java.lang.CharSequence)value$; break;
    case 2: cityName = (java.lang.CharSequence)value$; break;
    case 3: terminalName = (java.lang.CharSequence)value$; break;
    case 4: geoCode = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'cityCode' field.
   * @return The value of the 'cityCode' field.
   */
  public java.lang.CharSequence getCityCode() {
    return cityCode;
  }


  /**
   * Sets the value of the 'cityCode' field.
   * @param value the value to set.
   */
  public void setCityCode(java.lang.CharSequence value) {
    this.cityCode = value;
  }

  /**
   * Gets the value of the 'terminalCode' field.
   * @return The value of the 'terminalCode' field.
   */
  public java.lang.CharSequence getTerminalCode() {
    return terminalCode;
  }


  /**
   * Sets the value of the 'terminalCode' field.
   * @param value the value to set.
   */
  public void setTerminalCode(java.lang.CharSequence value) {
    this.terminalCode = value;
  }

  /**
   * Gets the value of the 'cityName' field.
   * @return The value of the 'cityName' field.
   */
  public java.lang.CharSequence getCityName() {
    return cityName;
  }


  /**
   * Sets the value of the 'cityName' field.
   * @param value the value to set.
   */
  public void setCityName(java.lang.CharSequence value) {
    this.cityName = value;
  }

  /**
   * Gets the value of the 'terminalName' field.
   * @return The value of the 'terminalName' field.
   */
  public java.lang.CharSequence getTerminalName() {
    return terminalName;
  }


  /**
   * Sets the value of the 'terminalName' field.
   * @param value the value to set.
   */
  public void setTerminalName(java.lang.CharSequence value) {
    this.terminalName = value;
  }

  /**
   * Gets the value of the 'geoCode' field.
   * @return The value of the 'geoCode' field.
   */
  public java.lang.CharSequence getGeoCode() {
    return geoCode;
  }


  /**
   * Sets the value of the 'geoCode' field.
   * @param value the value to set.
   */
  public void setGeoCode(java.lang.CharSequence value) {
    this.geoCode = value;
  }

  /**
   * Creates a new previousPortCall RecordBuilder.
   * @return A new previousPortCall RecordBuilder
   */
  public static net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.Builder newBuilder() {
    return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.Builder();
  }

  /**
   * Creates a new previousPortCall RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new previousPortCall RecordBuilder
   */
  public static net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.Builder newBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.Builder other) {
    if (other == null) {
      return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.Builder();
    } else {
      return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.Builder(other);
    }
  }

  /**
   * Creates a new previousPortCall RecordBuilder by copying an existing previousPortCall instance.
   * @param other The existing instance to copy.
   * @return A new previousPortCall RecordBuilder
   */
  public static net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.Builder newBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall other) {
    if (other == null) {
      return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.Builder();
    } else {
      return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.Builder(other);
    }
  }

  /**
   * RecordBuilder for previousPortCall instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<previousPortCall>
    implements org.apache.avro.data.RecordBuilder<previousPortCall> {

    private java.lang.CharSequence cityCode;
    private java.lang.CharSequence terminalCode;
    private java.lang.CharSequence cityName;
    private java.lang.CharSequence terminalName;
    private java.lang.CharSequence geoCode;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.cityCode)) {
        this.cityCode = data().deepCopy(fields()[0].schema(), other.cityCode);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.terminalCode)) {
        this.terminalCode = data().deepCopy(fields()[1].schema(), other.terminalCode);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.cityName)) {
        this.cityName = data().deepCopy(fields()[2].schema(), other.cityName);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.terminalName)) {
        this.terminalName = data().deepCopy(fields()[3].schema(), other.terminalName);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.geoCode)) {
        this.geoCode = data().deepCopy(fields()[4].schema(), other.geoCode);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing previousPortCall instance
     * @param other The existing instance to copy.
     */
    private Builder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.cityCode)) {
        this.cityCode = data().deepCopy(fields()[0].schema(), other.cityCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.terminalCode)) {
        this.terminalCode = data().deepCopy(fields()[1].schema(), other.terminalCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.cityName)) {
        this.cityName = data().deepCopy(fields()[2].schema(), other.cityName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.terminalName)) {
        this.terminalName = data().deepCopy(fields()[3].schema(), other.terminalName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.geoCode)) {
        this.geoCode = data().deepCopy(fields()[4].schema(), other.geoCode);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'cityCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getCityCode() {
      return cityCode;
    }


    /**
      * Sets the value of the 'cityCode' field.
      * @param value The value of 'cityCode'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.Builder setCityCode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.cityCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'cityCode' field has been set.
      * @return True if the 'cityCode' field has been set, false otherwise.
      */
    public boolean hasCityCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'cityCode' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.Builder clearCityCode() {
      cityCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'terminalCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getTerminalCode() {
      return terminalCode;
    }


    /**
      * Sets the value of the 'terminalCode' field.
      * @param value The value of 'terminalCode'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.Builder setTerminalCode(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.terminalCode = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'terminalCode' field has been set.
      * @return True if the 'terminalCode' field has been set, false otherwise.
      */
    public boolean hasTerminalCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'terminalCode' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.Builder clearTerminalCode() {
      terminalCode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'cityName' field.
      * @return The value.
      */
    public java.lang.CharSequence getCityName() {
      return cityName;
    }


    /**
      * Sets the value of the 'cityName' field.
      * @param value The value of 'cityName'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.Builder setCityName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.cityName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'cityName' field has been set.
      * @return True if the 'cityName' field has been set, false otherwise.
      */
    public boolean hasCityName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'cityName' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.Builder clearCityName() {
      cityName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'terminalName' field.
      * @return The value.
      */
    public java.lang.CharSequence getTerminalName() {
      return terminalName;
    }


    /**
      * Sets the value of the 'terminalName' field.
      * @param value The value of 'terminalName'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.Builder setTerminalName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.terminalName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'terminalName' field has been set.
      * @return True if the 'terminalName' field has been set, false otherwise.
      */
    public boolean hasTerminalName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'terminalName' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.Builder clearTerminalName() {
      terminalName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'geoCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getGeoCode() {
      return geoCode;
    }


    /**
      * Sets the value of the 'geoCode' field.
      * @param value The value of 'geoCode'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.Builder setGeoCode(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.geoCode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'geoCode' field has been set.
      * @return True if the 'geoCode' field has been set, false otherwise.
      */
    public boolean hasGeoCode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'geoCode' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.Builder clearGeoCode() {
      geoCode = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public previousPortCall build() {
      try {
        previousPortCall record = new previousPortCall();
        record.cityCode = fieldSetFlags()[0] ? this.cityCode : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.terminalCode = fieldSetFlags()[1] ? this.terminalCode : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.cityName = fieldSetFlags()[2] ? this.cityName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.terminalName = fieldSetFlags()[3] ? this.terminalName : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.geoCode = fieldSetFlags()[4] ? this.geoCode : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<previousPortCall>
    WRITER$ = (org.apache.avro.io.DatumWriter<previousPortCall>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<previousPortCall>
    READER$ = (org.apache.avro.io.DatumReader<previousPortCall>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.cityCode);

    out.writeString(this.terminalCode);

    out.writeString(this.cityName);

    out.writeString(this.terminalName);

    out.writeString(this.geoCode);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.cityCode = in.readString(this.cityCode instanceof Utf8 ? (Utf8)this.cityCode : null);

      this.terminalCode = in.readString(this.terminalCode instanceof Utf8 ? (Utf8)this.terminalCode : null);

      this.cityName = in.readString(this.cityName instanceof Utf8 ? (Utf8)this.cityName : null);

      this.terminalName = in.readString(this.terminalName instanceof Utf8 ? (Utf8)this.terminalName : null);

      this.geoCode = in.readString(this.geoCode instanceof Utf8 ? (Utf8)this.geoCode : null);

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.cityCode = in.readString(this.cityCode instanceof Utf8 ? (Utf8)this.cityCode : null);
          break;

        case 1:
          this.terminalCode = in.readString(this.terminalCode instanceof Utf8 ? (Utf8)this.terminalCode : null);
          break;

        case 2:
          this.cityName = in.readString(this.cityName instanceof Utf8 ? (Utf8)this.cityName : null);
          break;

        case 3:
          this.terminalName = in.readString(this.terminalName instanceof Utf8 ? (Utf8)this.terminalName : null);
          break;

        case 4:
          this.geoCode = in.readString(this.geoCode instanceof Utf8 ? (Utf8)this.geoCode : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










