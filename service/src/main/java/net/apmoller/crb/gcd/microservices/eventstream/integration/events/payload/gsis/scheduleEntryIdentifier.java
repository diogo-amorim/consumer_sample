/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class scheduleEntryIdentifier extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6572737860141962645L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"scheduleEntryIdentifier\",\"namespace\":\"net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis\",\"fields\":[{\"name\":\"vessel\",\"type\":{\"type\":\"record\",\"name\":\"vessel\",\"fields\":[{\"name\":\"vesselCode\",\"type\":\"string\"},{\"name\":\"IMONumber\",\"type\":\"string\"},{\"name\":\"vesselName\",\"type\":\"string\"},{\"name\":\"vesselOperatorCode\",\"type\":\"string\"},{\"name\":\"vesselFlag\",\"type\":\"string\"},{\"name\":\"vesselCallSign\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.vessel\"}},{\"name\":\"arrivalVoyage\",\"type\":{\"type\":\"record\",\"name\":\"arrivalVoyage\",\"fields\":[{\"name\":\"voyage\",\"type\":\"string\"},{\"name\":\"direction\",\"type\":\"string\"},{\"name\":\"transportMode\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.arrivalVoyage\"}},{\"name\":\"departureVoyage\",\"type\":{\"type\":\"record\",\"name\":\"departureVoyage\",\"fields\":[{\"name\":\"voyage\",\"type\":\"string\"},{\"name\":\"direction\",\"type\":\"string\"},{\"name\":\"transportMode\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.departureVoyage\"}},{\"name\":\"service\",\"type\":{\"type\":\"record\",\"name\":\"service\",\"fields\":[{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.service\"}},{\"name\":\"previousPortCall\",\"type\":{\"type\":\"record\",\"name\":\"previousPortCall\",\"fields\":[{\"name\":\"cityCode\",\"type\":\"string\"},{\"name\":\"terminalCode\",\"type\":\"string\"},{\"name\":\"cityName\",\"type\":\"string\"},{\"name\":\"terminalName\",\"type\":\"string\"},{\"name\":\"geoCode\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.previousPortCall\"}},{\"name\":\"currentPortCall\",\"type\":{\"type\":\"record\",\"name\":\"currentPortCall\",\"fields\":[{\"name\":\"cityCode\",\"type\":\"string\"},{\"name\":\"terminalCode\",\"type\":\"string\"},{\"name\":\"cityName\",\"type\":\"string\"},{\"name\":\"terminalName\",\"type\":\"string\"},{\"name\":\"geoCode\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.currentPortCall\"}},{\"name\":\"nextPortCall\",\"type\":{\"type\":\"record\",\"name\":\"nextPortCall\",\"fields\":[{\"name\":\"cityCode\",\"type\":\"string\"},{\"name\":\"terminalCode\",\"type\":\"string\"},{\"name\":\"cityName\",\"type\":\"string\"},{\"name\":\"terminalName\",\"type\":\"string\"},{\"name\":\"geoCode\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.nextPortCall\"}}],\"connect.name\":\"emp.maersk.com.scheduleEntryIdentifier\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<scheduleEntryIdentifier> ENCODER =
      new BinaryMessageEncoder<scheduleEntryIdentifier>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<scheduleEntryIdentifier> DECODER =
      new BinaryMessageDecoder<scheduleEntryIdentifier>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<scheduleEntryIdentifier> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<scheduleEntryIdentifier> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<scheduleEntryIdentifier> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<scheduleEntryIdentifier>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this scheduleEntryIdentifier to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a scheduleEntryIdentifier from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a scheduleEntryIdentifier instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static scheduleEntryIdentifier fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.vessel vessel;
  @Deprecated public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.arrivalVoyage arrivalVoyage;
  @Deprecated public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.departureVoyage departureVoyage;
  @Deprecated public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.service service;
  @Deprecated public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall previousPortCall;
  @Deprecated public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.currentPortCall currentPortCall;
  @Deprecated public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.nextPortCall nextPortCall;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public scheduleEntryIdentifier() {}

  /**
   * All-args constructor.
   * @param vessel The new value for vessel
   * @param arrivalVoyage The new value for arrivalVoyage
   * @param departureVoyage The new value for departureVoyage
   * @param service The new value for service
   * @param previousPortCall The new value for previousPortCall
   * @param currentPortCall The new value for currentPortCall
   * @param nextPortCall The new value for nextPortCall
   */
  public scheduleEntryIdentifier(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.vessel vessel, net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.arrivalVoyage arrivalVoyage, net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.departureVoyage departureVoyage, net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.service service, net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall previousPortCall, net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.currentPortCall currentPortCall, net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.nextPortCall nextPortCall) {
    this.vessel = vessel;
    this.arrivalVoyage = arrivalVoyage;
    this.departureVoyage = departureVoyage;
    this.service = service;
    this.previousPortCall = previousPortCall;
    this.currentPortCall = currentPortCall;
    this.nextPortCall = nextPortCall;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return vessel;
    case 1: return arrivalVoyage;
    case 2: return departureVoyage;
    case 3: return service;
    case 4: return previousPortCall;
    case 5: return currentPortCall;
    case 6: return nextPortCall;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: vessel = (net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.vessel)value$; break;
    case 1: arrivalVoyage = (net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.arrivalVoyage)value$; break;
    case 2: departureVoyage = (net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.departureVoyage)value$; break;
    case 3: service = (net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.service)value$; break;
    case 4: previousPortCall = (net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall)value$; break;
    case 5: currentPortCall = (net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.currentPortCall)value$; break;
    case 6: nextPortCall = (net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.nextPortCall)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'vessel' field.
   * @return The value of the 'vessel' field.
   */
  public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.vessel getVessel() {
    return vessel;
  }


  /**
   * Sets the value of the 'vessel' field.
   * @param value the value to set.
   */
  public void setVessel(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.vessel value) {
    this.vessel = value;
  }

  /**
   * Gets the value of the 'arrivalVoyage' field.
   * @return The value of the 'arrivalVoyage' field.
   */
  public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.arrivalVoyage getArrivalVoyage() {
    return arrivalVoyage;
  }


  /**
   * Sets the value of the 'arrivalVoyage' field.
   * @param value the value to set.
   */
  public void setArrivalVoyage(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.arrivalVoyage value) {
    this.arrivalVoyage = value;
  }

  /**
   * Gets the value of the 'departureVoyage' field.
   * @return The value of the 'departureVoyage' field.
   */
  public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.departureVoyage getDepartureVoyage() {
    return departureVoyage;
  }


  /**
   * Sets the value of the 'departureVoyage' field.
   * @param value the value to set.
   */
  public void setDepartureVoyage(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.departureVoyage value) {
    this.departureVoyage = value;
  }

  /**
   * Gets the value of the 'service' field.
   * @return The value of the 'service' field.
   */
  public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.service getService() {
    return service;
  }


  /**
   * Sets the value of the 'service' field.
   * @param value the value to set.
   */
  public void setService(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.service value) {
    this.service = value;
  }

  /**
   * Gets the value of the 'previousPortCall' field.
   * @return The value of the 'previousPortCall' field.
   */
  public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall getPreviousPortCall() {
    return previousPortCall;
  }


  /**
   * Sets the value of the 'previousPortCall' field.
   * @param value the value to set.
   */
  public void setPreviousPortCall(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall value) {
    this.previousPortCall = value;
  }

  /**
   * Gets the value of the 'currentPortCall' field.
   * @return The value of the 'currentPortCall' field.
   */
  public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.currentPortCall getCurrentPortCall() {
    return currentPortCall;
  }


  /**
   * Sets the value of the 'currentPortCall' field.
   * @param value the value to set.
   */
  public void setCurrentPortCall(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.currentPortCall value) {
    this.currentPortCall = value;
  }

  /**
   * Gets the value of the 'nextPortCall' field.
   * @return The value of the 'nextPortCall' field.
   */
  public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.nextPortCall getNextPortCall() {
    return nextPortCall;
  }


  /**
   * Sets the value of the 'nextPortCall' field.
   * @param value the value to set.
   */
  public void setNextPortCall(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.nextPortCall value) {
    this.nextPortCall = value;
  }

  /**
   * Creates a new scheduleEntryIdentifier RecordBuilder.
   * @return A new scheduleEntryIdentifier RecordBuilder
   */
  public static net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder newBuilder() {
    return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder();
  }

  /**
   * Creates a new scheduleEntryIdentifier RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new scheduleEntryIdentifier RecordBuilder
   */
  public static net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder newBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder other) {
    if (other == null) {
      return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder();
    } else {
      return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder(other);
    }
  }

  /**
   * Creates a new scheduleEntryIdentifier RecordBuilder by copying an existing scheduleEntryIdentifier instance.
   * @param other The existing instance to copy.
   * @return A new scheduleEntryIdentifier RecordBuilder
   */
  public static net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder newBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier other) {
    if (other == null) {
      return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder();
    } else {
      return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder(other);
    }
  }

  /**
   * RecordBuilder for scheduleEntryIdentifier instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<scheduleEntryIdentifier>
    implements org.apache.avro.data.RecordBuilder<scheduleEntryIdentifier> {

    private net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.vessel vessel;
    private net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.vessel.Builder vesselBuilder;
    private net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.arrivalVoyage arrivalVoyage;
    private net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.arrivalVoyage.Builder arrivalVoyageBuilder;
    private net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.departureVoyage departureVoyage;
    private net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.departureVoyage.Builder departureVoyageBuilder;
    private net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.service service;
    private net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.service.Builder serviceBuilder;
    private net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall previousPortCall;
    private net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.Builder previousPortCallBuilder;
    private net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.currentPortCall currentPortCall;
    private net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.currentPortCall.Builder currentPortCallBuilder;
    private net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.nextPortCall nextPortCall;
    private net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.nextPortCall.Builder nextPortCallBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.vessel)) {
        this.vessel = data().deepCopy(fields()[0].schema(), other.vessel);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasVesselBuilder()) {
        this.vesselBuilder = net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.vessel.newBuilder(other.getVesselBuilder());
      }
      if (isValidValue(fields()[1], other.arrivalVoyage)) {
        this.arrivalVoyage = data().deepCopy(fields()[1].schema(), other.arrivalVoyage);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasArrivalVoyageBuilder()) {
        this.arrivalVoyageBuilder = net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.arrivalVoyage.newBuilder(other.getArrivalVoyageBuilder());
      }
      if (isValidValue(fields()[2], other.departureVoyage)) {
        this.departureVoyage = data().deepCopy(fields()[2].schema(), other.departureVoyage);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasDepartureVoyageBuilder()) {
        this.departureVoyageBuilder = net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.departureVoyage.newBuilder(other.getDepartureVoyageBuilder());
      }
      if (isValidValue(fields()[3], other.service)) {
        this.service = data().deepCopy(fields()[3].schema(), other.service);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasServiceBuilder()) {
        this.serviceBuilder = net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.service.newBuilder(other.getServiceBuilder());
      }
      if (isValidValue(fields()[4], other.previousPortCall)) {
        this.previousPortCall = data().deepCopy(fields()[4].schema(), other.previousPortCall);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasPreviousPortCallBuilder()) {
        this.previousPortCallBuilder = net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.newBuilder(other.getPreviousPortCallBuilder());
      }
      if (isValidValue(fields()[5], other.currentPortCall)) {
        this.currentPortCall = data().deepCopy(fields()[5].schema(), other.currentPortCall);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasCurrentPortCallBuilder()) {
        this.currentPortCallBuilder = net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.currentPortCall.newBuilder(other.getCurrentPortCallBuilder());
      }
      if (isValidValue(fields()[6], other.nextPortCall)) {
        this.nextPortCall = data().deepCopy(fields()[6].schema(), other.nextPortCall);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (other.hasNextPortCallBuilder()) {
        this.nextPortCallBuilder = net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.nextPortCall.newBuilder(other.getNextPortCallBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing scheduleEntryIdentifier instance
     * @param other The existing instance to copy.
     */
    private Builder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.vessel)) {
        this.vessel = data().deepCopy(fields()[0].schema(), other.vessel);
        fieldSetFlags()[0] = true;
      }
      this.vesselBuilder = null;
      if (isValidValue(fields()[1], other.arrivalVoyage)) {
        this.arrivalVoyage = data().deepCopy(fields()[1].schema(), other.arrivalVoyage);
        fieldSetFlags()[1] = true;
      }
      this.arrivalVoyageBuilder = null;
      if (isValidValue(fields()[2], other.departureVoyage)) {
        this.departureVoyage = data().deepCopy(fields()[2].schema(), other.departureVoyage);
        fieldSetFlags()[2] = true;
      }
      this.departureVoyageBuilder = null;
      if (isValidValue(fields()[3], other.service)) {
        this.service = data().deepCopy(fields()[3].schema(), other.service);
        fieldSetFlags()[3] = true;
      }
      this.serviceBuilder = null;
      if (isValidValue(fields()[4], other.previousPortCall)) {
        this.previousPortCall = data().deepCopy(fields()[4].schema(), other.previousPortCall);
        fieldSetFlags()[4] = true;
      }
      this.previousPortCallBuilder = null;
      if (isValidValue(fields()[5], other.currentPortCall)) {
        this.currentPortCall = data().deepCopy(fields()[5].schema(), other.currentPortCall);
        fieldSetFlags()[5] = true;
      }
      this.currentPortCallBuilder = null;
      if (isValidValue(fields()[6], other.nextPortCall)) {
        this.nextPortCall = data().deepCopy(fields()[6].schema(), other.nextPortCall);
        fieldSetFlags()[6] = true;
      }
      this.nextPortCallBuilder = null;
    }

    /**
      * Gets the value of the 'vessel' field.
      * @return The value.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.vessel getVessel() {
      return vessel;
    }


    /**
      * Sets the value of the 'vessel' field.
      * @param value The value of 'vessel'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder setVessel(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.vessel value) {
      validate(fields()[0], value);
      this.vesselBuilder = null;
      this.vessel = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'vessel' field has been set.
      * @return True if the 'vessel' field has been set, false otherwise.
      */
    public boolean hasVessel() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'vessel' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.vessel.Builder getVesselBuilder() {
      if (vesselBuilder == null) {
        if (hasVessel()) {
          setVesselBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.vessel.newBuilder(vessel));
        } else {
          setVesselBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.vessel.newBuilder());
        }
      }
      return vesselBuilder;
    }

    /**
     * Sets the Builder instance for the 'vessel' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder setVesselBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.vessel.Builder value) {
      clearVessel();
      vesselBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'vessel' field has an active Builder instance
     * @return True if the 'vessel' field has an active Builder instance
     */
    public boolean hasVesselBuilder() {
      return vesselBuilder != null;
    }

    /**
      * Clears the value of the 'vessel' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder clearVessel() {
      vessel = null;
      vesselBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'arrivalVoyage' field.
      * @return The value.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.arrivalVoyage getArrivalVoyage() {
      return arrivalVoyage;
    }


    /**
      * Sets the value of the 'arrivalVoyage' field.
      * @param value The value of 'arrivalVoyage'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder setArrivalVoyage(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.arrivalVoyage value) {
      validate(fields()[1], value);
      this.arrivalVoyageBuilder = null;
      this.arrivalVoyage = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'arrivalVoyage' field has been set.
      * @return True if the 'arrivalVoyage' field has been set, false otherwise.
      */
    public boolean hasArrivalVoyage() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'arrivalVoyage' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.arrivalVoyage.Builder getArrivalVoyageBuilder() {
      if (arrivalVoyageBuilder == null) {
        if (hasArrivalVoyage()) {
          setArrivalVoyageBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.arrivalVoyage.newBuilder(arrivalVoyage));
        } else {
          setArrivalVoyageBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.arrivalVoyage.newBuilder());
        }
      }
      return arrivalVoyageBuilder;
    }

    /**
     * Sets the Builder instance for the 'arrivalVoyage' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder setArrivalVoyageBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.arrivalVoyage.Builder value) {
      clearArrivalVoyage();
      arrivalVoyageBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'arrivalVoyage' field has an active Builder instance
     * @return True if the 'arrivalVoyage' field has an active Builder instance
     */
    public boolean hasArrivalVoyageBuilder() {
      return arrivalVoyageBuilder != null;
    }

    /**
      * Clears the value of the 'arrivalVoyage' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder clearArrivalVoyage() {
      arrivalVoyage = null;
      arrivalVoyageBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'departureVoyage' field.
      * @return The value.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.departureVoyage getDepartureVoyage() {
      return departureVoyage;
    }


    /**
      * Sets the value of the 'departureVoyage' field.
      * @param value The value of 'departureVoyage'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder setDepartureVoyage(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.departureVoyage value) {
      validate(fields()[2], value);
      this.departureVoyageBuilder = null;
      this.departureVoyage = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'departureVoyage' field has been set.
      * @return True if the 'departureVoyage' field has been set, false otherwise.
      */
    public boolean hasDepartureVoyage() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'departureVoyage' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.departureVoyage.Builder getDepartureVoyageBuilder() {
      if (departureVoyageBuilder == null) {
        if (hasDepartureVoyage()) {
          setDepartureVoyageBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.departureVoyage.newBuilder(departureVoyage));
        } else {
          setDepartureVoyageBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.departureVoyage.newBuilder());
        }
      }
      return departureVoyageBuilder;
    }

    /**
     * Sets the Builder instance for the 'departureVoyage' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder setDepartureVoyageBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.departureVoyage.Builder value) {
      clearDepartureVoyage();
      departureVoyageBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'departureVoyage' field has an active Builder instance
     * @return True if the 'departureVoyage' field has an active Builder instance
     */
    public boolean hasDepartureVoyageBuilder() {
      return departureVoyageBuilder != null;
    }

    /**
      * Clears the value of the 'departureVoyage' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder clearDepartureVoyage() {
      departureVoyage = null;
      departureVoyageBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'service' field.
      * @return The value.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.service getService() {
      return service;
    }


    /**
      * Sets the value of the 'service' field.
      * @param value The value of 'service'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder setService(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.service value) {
      validate(fields()[3], value);
      this.serviceBuilder = null;
      this.service = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'service' field has been set.
      * @return True if the 'service' field has been set, false otherwise.
      */
    public boolean hasService() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'service' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.service.Builder getServiceBuilder() {
      if (serviceBuilder == null) {
        if (hasService()) {
          setServiceBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.service.newBuilder(service));
        } else {
          setServiceBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.service.newBuilder());
        }
      }
      return serviceBuilder;
    }

    /**
     * Sets the Builder instance for the 'service' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder setServiceBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.service.Builder value) {
      clearService();
      serviceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'service' field has an active Builder instance
     * @return True if the 'service' field has an active Builder instance
     */
    public boolean hasServiceBuilder() {
      return serviceBuilder != null;
    }

    /**
      * Clears the value of the 'service' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder clearService() {
      service = null;
      serviceBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'previousPortCall' field.
      * @return The value.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall getPreviousPortCall() {
      return previousPortCall;
    }


    /**
      * Sets the value of the 'previousPortCall' field.
      * @param value The value of 'previousPortCall'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder setPreviousPortCall(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall value) {
      validate(fields()[4], value);
      this.previousPortCallBuilder = null;
      this.previousPortCall = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'previousPortCall' field has been set.
      * @return True if the 'previousPortCall' field has been set, false otherwise.
      */
    public boolean hasPreviousPortCall() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'previousPortCall' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.Builder getPreviousPortCallBuilder() {
      if (previousPortCallBuilder == null) {
        if (hasPreviousPortCall()) {
          setPreviousPortCallBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.newBuilder(previousPortCall));
        } else {
          setPreviousPortCallBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.newBuilder());
        }
      }
      return previousPortCallBuilder;
    }

    /**
     * Sets the Builder instance for the 'previousPortCall' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder setPreviousPortCallBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall.Builder value) {
      clearPreviousPortCall();
      previousPortCallBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'previousPortCall' field has an active Builder instance
     * @return True if the 'previousPortCall' field has an active Builder instance
     */
    public boolean hasPreviousPortCallBuilder() {
      return previousPortCallBuilder != null;
    }

    /**
      * Clears the value of the 'previousPortCall' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder clearPreviousPortCall() {
      previousPortCall = null;
      previousPortCallBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'currentPortCall' field.
      * @return The value.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.currentPortCall getCurrentPortCall() {
      return currentPortCall;
    }


    /**
      * Sets the value of the 'currentPortCall' field.
      * @param value The value of 'currentPortCall'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder setCurrentPortCall(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.currentPortCall value) {
      validate(fields()[5], value);
      this.currentPortCallBuilder = null;
      this.currentPortCall = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'currentPortCall' field has been set.
      * @return True if the 'currentPortCall' field has been set, false otherwise.
      */
    public boolean hasCurrentPortCall() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'currentPortCall' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.currentPortCall.Builder getCurrentPortCallBuilder() {
      if (currentPortCallBuilder == null) {
        if (hasCurrentPortCall()) {
          setCurrentPortCallBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.currentPortCall.newBuilder(currentPortCall));
        } else {
          setCurrentPortCallBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.currentPortCall.newBuilder());
        }
      }
      return currentPortCallBuilder;
    }

    /**
     * Sets the Builder instance for the 'currentPortCall' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder setCurrentPortCallBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.currentPortCall.Builder value) {
      clearCurrentPortCall();
      currentPortCallBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'currentPortCall' field has an active Builder instance
     * @return True if the 'currentPortCall' field has an active Builder instance
     */
    public boolean hasCurrentPortCallBuilder() {
      return currentPortCallBuilder != null;
    }

    /**
      * Clears the value of the 'currentPortCall' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder clearCurrentPortCall() {
      currentPortCall = null;
      currentPortCallBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'nextPortCall' field.
      * @return The value.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.nextPortCall getNextPortCall() {
      return nextPortCall;
    }


    /**
      * Sets the value of the 'nextPortCall' field.
      * @param value The value of 'nextPortCall'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder setNextPortCall(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.nextPortCall value) {
      validate(fields()[6], value);
      this.nextPortCallBuilder = null;
      this.nextPortCall = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'nextPortCall' field has been set.
      * @return True if the 'nextPortCall' field has been set, false otherwise.
      */
    public boolean hasNextPortCall() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'nextPortCall' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.nextPortCall.Builder getNextPortCallBuilder() {
      if (nextPortCallBuilder == null) {
        if (hasNextPortCall()) {
          setNextPortCallBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.nextPortCall.newBuilder(nextPortCall));
        } else {
          setNextPortCallBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.nextPortCall.newBuilder());
        }
      }
      return nextPortCallBuilder;
    }

    /**
     * Sets the Builder instance for the 'nextPortCall' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder setNextPortCallBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.nextPortCall.Builder value) {
      clearNextPortCall();
      nextPortCallBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'nextPortCall' field has an active Builder instance
     * @return True if the 'nextPortCall' field has an active Builder instance
     */
    public boolean hasNextPortCallBuilder() {
      return nextPortCallBuilder != null;
    }

    /**
      * Clears the value of the 'nextPortCall' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntryIdentifier.Builder clearNextPortCall() {
      nextPortCall = null;
      nextPortCallBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public scheduleEntryIdentifier build() {
      try {
        scheduleEntryIdentifier record = new scheduleEntryIdentifier();
        if (vesselBuilder != null) {
          try {
            record.vessel = this.vesselBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("vessel"));
            throw e;
          }
        } else {
          record.vessel = fieldSetFlags()[0] ? this.vessel : (net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.vessel) defaultValue(fields()[0]);
        }
        if (arrivalVoyageBuilder != null) {
          try {
            record.arrivalVoyage = this.arrivalVoyageBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("arrivalVoyage"));
            throw e;
          }
        } else {
          record.arrivalVoyage = fieldSetFlags()[1] ? this.arrivalVoyage : (net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.arrivalVoyage) defaultValue(fields()[1]);
        }
        if (departureVoyageBuilder != null) {
          try {
            record.departureVoyage = this.departureVoyageBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("departureVoyage"));
            throw e;
          }
        } else {
          record.departureVoyage = fieldSetFlags()[2] ? this.departureVoyage : (net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.departureVoyage) defaultValue(fields()[2]);
        }
        if (serviceBuilder != null) {
          try {
            record.service = this.serviceBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("service"));
            throw e;
          }
        } else {
          record.service = fieldSetFlags()[3] ? this.service : (net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.service) defaultValue(fields()[3]);
        }
        if (previousPortCallBuilder != null) {
          try {
            record.previousPortCall = this.previousPortCallBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("previousPortCall"));
            throw e;
          }
        } else {
          record.previousPortCall = fieldSetFlags()[4] ? this.previousPortCall : (net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall) defaultValue(fields()[4]);
        }
        if (currentPortCallBuilder != null) {
          try {
            record.currentPortCall = this.currentPortCallBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("currentPortCall"));
            throw e;
          }
        } else {
          record.currentPortCall = fieldSetFlags()[5] ? this.currentPortCall : (net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.currentPortCall) defaultValue(fields()[5]);
        }
        if (nextPortCallBuilder != null) {
          try {
            record.nextPortCall = this.nextPortCallBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("nextPortCall"));
            throw e;
          }
        } else {
          record.nextPortCall = fieldSetFlags()[6] ? this.nextPortCall : (net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.nextPortCall) defaultValue(fields()[6]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<scheduleEntryIdentifier>
    WRITER$ = (org.apache.avro.io.DatumWriter<scheduleEntryIdentifier>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<scheduleEntryIdentifier>
    READER$ = (org.apache.avro.io.DatumReader<scheduleEntryIdentifier>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.vessel.customEncode(out);

    this.arrivalVoyage.customEncode(out);

    this.departureVoyage.customEncode(out);

    this.service.customEncode(out);

    this.previousPortCall.customEncode(out);

    this.currentPortCall.customEncode(out);

    this.nextPortCall.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.vessel == null) {
        this.vessel = new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.vessel();
      }
      this.vessel.customDecode(in);

      if (this.arrivalVoyage == null) {
        this.arrivalVoyage = new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.arrivalVoyage();
      }
      this.arrivalVoyage.customDecode(in);

      if (this.departureVoyage == null) {
        this.departureVoyage = new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.departureVoyage();
      }
      this.departureVoyage.customDecode(in);

      if (this.service == null) {
        this.service = new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.service();
      }
      this.service.customDecode(in);

      if (this.previousPortCall == null) {
        this.previousPortCall = new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall();
      }
      this.previousPortCall.customDecode(in);

      if (this.currentPortCall == null) {
        this.currentPortCall = new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.currentPortCall();
      }
      this.currentPortCall.customDecode(in);

      if (this.nextPortCall == null) {
        this.nextPortCall = new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.nextPortCall();
      }
      this.nextPortCall.customDecode(in);

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.vessel == null) {
            this.vessel = new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.vessel();
          }
          this.vessel.customDecode(in);
          break;

        case 1:
          if (this.arrivalVoyage == null) {
            this.arrivalVoyage = new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.arrivalVoyage();
          }
          this.arrivalVoyage.customDecode(in);
          break;

        case 2:
          if (this.departureVoyage == null) {
            this.departureVoyage = new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.departureVoyage();
          }
          this.departureVoyage.customDecode(in);
          break;

        case 3:
          if (this.service == null) {
            this.service = new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.service();
          }
          this.service.customDecode(in);
          break;

        case 4:
          if (this.previousPortCall == null) {
            this.previousPortCall = new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.previousPortCall();
          }
          this.previousPortCall.customDecode(in);
          break;

        case 5:
          if (this.currentPortCall == null) {
            this.currentPortCall = new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.currentPortCall();
          }
          this.currentPortCall.customDecode(in);
          break;

        case 6:
          if (this.nextPortCall == null) {
            this.nextPortCall = new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.nextPortCall();
          }
          this.nextPortCall.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










