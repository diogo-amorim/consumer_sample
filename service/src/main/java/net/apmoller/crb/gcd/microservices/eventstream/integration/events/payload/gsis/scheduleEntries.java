/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class scheduleEntries extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8682505227546277255L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"scheduleEntries\",\"namespace\":\"net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis\",\"fields\":[{\"name\":\"scheduleEntry\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"scheduleEntry_record\",\"fields\":[{\"name\":\"rotationId\",\"type\":\"string\"},{\"name\":\"rotationName\",\"type\":\"string\"},{\"name\":\"rotationVersion\",\"type\":\"string\"},{\"name\":\"scheduleEntryID\",\"type\":{\"type\":\"record\",\"name\":\"scheduleEntryID\",\"fields\":[{\"name\":\"scheduleEntryKey\",\"type\":\"string\"},{\"name\":\"scheduleEntryIdentifier\",\"type\":{\"type\":\"record\",\"name\":\"scheduleEntryIdentifier\",\"fields\":[{\"name\":\"vessel\",\"type\":{\"type\":\"record\",\"name\":\"vessel\",\"fields\":[{\"name\":\"vesselCode\",\"type\":\"string\"},{\"name\":\"IMONumber\",\"type\":\"string\"},{\"name\":\"vesselName\",\"type\":\"string\"},{\"name\":\"vesselOperatorCode\",\"type\":\"string\"},{\"name\":\"vesselFlag\",\"type\":\"string\"},{\"name\":\"vesselCallSign\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.vessel\"}},{\"name\":\"arrivalVoyage\",\"type\":{\"type\":\"record\",\"name\":\"arrivalVoyage\",\"fields\":[{\"name\":\"voyage\",\"type\":\"string\"},{\"name\":\"direction\",\"type\":\"string\"},{\"name\":\"transportMode\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.arrivalVoyage\"}},{\"name\":\"departureVoyage\",\"type\":{\"type\":\"record\",\"name\":\"departureVoyage\",\"fields\":[{\"name\":\"voyage\",\"type\":\"string\"},{\"name\":\"direction\",\"type\":\"string\"},{\"name\":\"transportMode\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.departureVoyage\"}},{\"name\":\"service\",\"type\":{\"type\":\"record\",\"name\":\"service\",\"fields\":[{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.service\"}},{\"name\":\"previousPortCall\",\"type\":{\"type\":\"record\",\"name\":\"previousPortCall\",\"fields\":[{\"name\":\"cityCode\",\"type\":\"string\"},{\"name\":\"terminalCode\",\"type\":\"string\"},{\"name\":\"cityName\",\"type\":\"string\"},{\"name\":\"terminalName\",\"type\":\"string\"},{\"name\":\"geoCode\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.previousPortCall\"}},{\"name\":\"currentPortCall\",\"type\":{\"type\":\"record\",\"name\":\"currentPortCall\",\"fields\":[{\"name\":\"cityCode\",\"type\":\"string\"},{\"name\":\"terminalCode\",\"type\":\"string\"},{\"name\":\"cityName\",\"type\":\"string\"},{\"name\":\"terminalName\",\"type\":\"string\"},{\"name\":\"geoCode\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.currentPortCall\"}},{\"name\":\"nextPortCall\",\"type\":{\"type\":\"record\",\"name\":\"nextPortCall\",\"fields\":[{\"name\":\"cityCode\",\"type\":\"string\"},{\"name\":\"terminalCode\",\"type\":\"string\"},{\"name\":\"cityName\",\"type\":\"string\"},{\"name\":\"terminalName\",\"type\":\"string\"},{\"name\":\"geoCode\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.nextPortCall\"}}],\"connect.name\":\"emp.maersk.com.scheduleEntryIdentifier\"}}],\"connect.name\":\"emp.maersk.com.scheduleEntryID\"}},{\"name\":\"siteCallStatus\",\"type\":\"string\"},{\"name\":\"schedule\",\"type\":{\"type\":\"record\",\"name\":\"schedule\",\"fields\":[{\"name\":\"proformaArrival\",\"type\":\"string\"},{\"name\":\"proformaDeparture\",\"type\":\"string\"},{\"name\":\"scheduledArrival\",\"type\":\"string\"},{\"name\":\"scheduledDeparture\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.schedule\"}},{\"name\":\"dummyCall\",\"type\":\"string\"},{\"name\":\"omitReason\",\"type\":\"string\"},{\"name\":\"actual\",\"type\":{\"type\":\"record\",\"name\":\"actual\",\"fields\":[{\"name\":\"actualArrival\",\"type\":\"string\"},{\"name\":\"actualDeparture\",\"type\":\"string\"},{\"name\":\"arrivalAtPilotStation\",\"type\":\"string\"},{\"name\":\"firstPilotOnBoard\",\"type\":\"string\"},{\"name\":\"pilotOff\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.actual\"}},{\"name\":\"notes\",\"type\":\"string\"}],\"connect.name\":\"emp.maersk.com.scheduleEntry_record\"}}}],\"connect.name\":\"emp.maersk.com.scheduleEntries\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<scheduleEntries> ENCODER =
      new BinaryMessageEncoder<scheduleEntries>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<scheduleEntries> DECODER =
      new BinaryMessageDecoder<scheduleEntries>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<scheduleEntries> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<scheduleEntries> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<scheduleEntries> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<scheduleEntries>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this scheduleEntries to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a scheduleEntries from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a scheduleEntries instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static scheduleEntries fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.util.List<net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record> scheduleEntry;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public scheduleEntries() {}

  /**
   * All-args constructor.
   * @param scheduleEntry The new value for scheduleEntry
   */
  public scheduleEntries(java.util.List<net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record> scheduleEntry) {
    this.scheduleEntry = scheduleEntry;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return scheduleEntry;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: scheduleEntry = (java.util.List<net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'scheduleEntry' field.
   * @return The value of the 'scheduleEntry' field.
   */
  public java.util.List<net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record> getScheduleEntry() {
    return scheduleEntry;
  }


  /**
   * Sets the value of the 'scheduleEntry' field.
   * @param value the value to set.
   */
  public void setScheduleEntry(java.util.List<net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record> value) {
    this.scheduleEntry = value;
  }

  /**
   * Creates a new scheduleEntries RecordBuilder.
   * @return A new scheduleEntries RecordBuilder
   */
  public static net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntries.Builder newBuilder() {
    return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntries.Builder();
  }

  /**
   * Creates a new scheduleEntries RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new scheduleEntries RecordBuilder
   */
  public static net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntries.Builder newBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntries.Builder other) {
    if (other == null) {
      return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntries.Builder();
    } else {
      return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntries.Builder(other);
    }
  }

  /**
   * Creates a new scheduleEntries RecordBuilder by copying an existing scheduleEntries instance.
   * @param other The existing instance to copy.
   * @return A new scheduleEntries RecordBuilder
   */
  public static net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntries.Builder newBuilder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntries other) {
    if (other == null) {
      return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntries.Builder();
    } else {
      return new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntries.Builder(other);
    }
  }

  /**
   * RecordBuilder for scheduleEntries instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<scheduleEntries>
    implements org.apache.avro.data.RecordBuilder<scheduleEntries> {

    private java.util.List<net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record> scheduleEntry;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntries.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.scheduleEntry)) {
        this.scheduleEntry = data().deepCopy(fields()[0].schema(), other.scheduleEntry);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
    }

    /**
     * Creates a Builder by copying an existing scheduleEntries instance
     * @param other The existing instance to copy.
     */
    private Builder(net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntries other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.scheduleEntry)) {
        this.scheduleEntry = data().deepCopy(fields()[0].schema(), other.scheduleEntry);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'scheduleEntry' field.
      * @return The value.
      */
    public java.util.List<net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record> getScheduleEntry() {
      return scheduleEntry;
    }


    /**
      * Sets the value of the 'scheduleEntry' field.
      * @param value The value of 'scheduleEntry'.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntries.Builder setScheduleEntry(java.util.List<net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record> value) {
      validate(fields()[0], value);
      this.scheduleEntry = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'scheduleEntry' field has been set.
      * @return True if the 'scheduleEntry' field has been set, false otherwise.
      */
    public boolean hasScheduleEntry() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'scheduleEntry' field.
      * @return This builder.
      */
    public net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntries.Builder clearScheduleEntry() {
      scheduleEntry = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public scheduleEntries build() {
      try {
        scheduleEntries record = new scheduleEntries();
        record.scheduleEntry = fieldSetFlags()[0] ? this.scheduleEntry : (java.util.List<net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record>) defaultValue(fields()[0]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<scheduleEntries>
    WRITER$ = (org.apache.avro.io.DatumWriter<scheduleEntries>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<scheduleEntries>
    READER$ = (org.apache.avro.io.DatumReader<scheduleEntries>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.scheduleEntry.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record e0: this.scheduleEntry) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record> a0 = this.scheduleEntry;
      if (a0 == null) {
        a0 = new SpecificData.Array<net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record>((int)size0, SCHEMA$.getField("scheduleEntry").schema());
        this.scheduleEntry = a0;
      } else a0.clear();
      SpecificData.Array<net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 1; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record> a0 = this.scheduleEntry;
          if (a0 == null) {
            a0 = new SpecificData.Array<net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record>((int)size0, SCHEMA$.getField("scheduleEntry").schema());
            this.scheduleEntry = a0;
          } else a0.clear();
          SpecificData.Array<net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new net.apmoller.crb.gcd.microservices.eventstream.integration.events.payload.gsis.scheduleEntry_record();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










